/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "BinaryData.h"

//==============================================================================
SIDAudioProcessorEditor::SIDAudioProcessorEditor (SIDAudioProcessor& p)
    : slAudioProcessorEditor (p, 60, 100), processor (p)
{
    logo = ImageFileFormat::loadFrom (BinaryData::logo_png, BinaryData::logo_pngSize);
    
    for (slParameter* pp : p.getPluginParameters())
    {
        ParamComponent* c = pp->isOnOff() ? (ParamComponent*)new Switch (pp) : (ParamComponent*)new Knob (pp);
        
        addAndMakeVisible (c);
        controls.add (c);
    }
    
    addAndMakeVisible (&scope);
    
    setGridSize (8, 3);
    
    scope.setNumSamplesPerPixel (2);
    scope.setVerticalZoomFactor (3.0f);
}

SIDAudioProcessorEditor::~SIDAudioProcessorEditor()
{
}

//==============================================================================
void SIDAudioProcessorEditor::paint (Graphics& g)
{
    slAudioProcessorEditor::paint (g);
    
    g.setFont (Font (15.0f));
    g.setColour (Colours::white);
    g.drawText("Ver: " JucePlugin_VersionString, getLocalBounds().reduced (4), Justification::topRight);
    
    g.drawImageAt (logo, getWidth() / 2 - logo.getWidth() / 2, headerHeight / 2 - logo.getHeight() / 2);
}

void SIDAudioProcessorEditor::resized()
{
    using AP = SIDAudioProcessor;
    
    slAudioProcessorEditor::resized();
    
    Rectangle<int> r = getControlsArea();
    
    int idx = 0;
    for (slParameter* pp : processor.getPluginParameters())
        componentForId (pp->getUid())->setBounds (getGridArea (idx++, 0));

    scope.setBounds (getGridArea (2, 1, 4, 2).reduced (5));
}
