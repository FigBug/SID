/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "BinaryData.h"

//==============================================================================
SIDAudioProcessorEditor::SIDAudioProcessorEditor (SIDAudioProcessor& p)
    : slAudioProcessorEditor (p, 60, 100), processor (p)
{
    using AP = SIDAudioProcessor;
    
    logo = ImageFileFormat::loadFrom (BinaryData::logo_png, BinaryData::logo_pngSize);
    
    for (slParameter* pp : p.getPluginParameters())
    {
        ParamComponent* c;
        
        if (pp->getUid().contains ("tune") || pp->getUid().contains ("fine"))
            c = new Knob (pp, true);
        else if (pp->getUid() == AP::paramWave1 || pp->getUid() == AP::paramWave2 || pp->getUid() == AP::paramWave3)
            c = new Select (pp);
        else
            c = pp->isOnOff() ? (ParamComponent*)new Switch (pp) : (ParamComponent*)new Knob (pp);
        
        addAndMakeVisible (c);
        controls.add (c);
    }
    
    addAndMakeVisible (&scope);
    
    setGridSize (18, 3);
    
    scope.setNumSamplesPerPixel (2);
    scope.setVerticalZoomFactor (3.0f);
}

SIDAudioProcessorEditor::~SIDAudioProcessorEditor()
{
}

//==============================================================================
void SIDAudioProcessorEditor::paint (Graphics& g)
{
    slAudioProcessorEditor::paint (g);
    
    g.setFont (Font (15.0f));
    g.setColour (Colours::white);
    g.drawText("Ver: " JucePlugin_VersionString, getLocalBounds().reduced (4), Justification::topRight);
    
    g.drawImageAt (logo, getWidth() / 2 - logo.getWidth() / 2, 0);
}

void SIDAudioProcessorEditor::resized()
{
    using AP = SIDAudioProcessor;
    
    slAudioProcessorEditor::resized();
    
    Rectangle<int> r = getControlsArea();
    
    int idx = 0;
    for (slParameter* pp : processor.getPluginParameters())
    {
        if (idx < 30)
            componentForId (pp->getUid())->setBounds (getGridArea (idx % 10, idx / 10));
        else
            componentForId (pp->getUid())->setBounds (getGridArea (15 + (idx - 30) % 3, (idx - 30) / 3));

        idx++;
    }
    
    auto rc = getGridArea (0, 2);
    componentForId (AP::paramWave3)->setBounds (rc.removeFromTop (rc.getHeight() / 2));
    componentForId (AP::paramOutput3)->setBounds (rc);

    scope.setBounds (getGridArea (10, 0, 5, 3).reduced (5));
}
