/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#pragma once

#include <JuceHeader.h>
#include "sid.h"

//==============================================================================
class SIDAudioProcessor;
class SIDEngine
{
public:
    SIDEngine (SIDAudioProcessor& p);

    void prepareToPlay (double sampleRate);
    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midi);

    void prepareBlock (AudioSampleBuffer& buffer);
    void handleMessage (const MidiMessage& msg);
    void runUntil (int& done, AudioSampleBuffer& buffer, int pos);

    int getNote()               { return lastNote;              }
    int regToCutoff (reg16 val) { return sid.regToCutoff (val); }

private:
    int parameterIntValue (const String& uid);
    float parameterValue (const String& uid);
    bool parameterBoolValue (const String& uid);
    void updateOscs (int curNote);
    void writeReg (uint8 reg, uint8 value);

    SIDAudioProcessor& processor;
    
    int lastNote = -1;
    int velocity = 0;
    float pitchBend = 0;
    Array<int> noteQueue;
    
    SID sid;
    
    std::map<uint8, uint8> regCache;
};

//==============================================================================
/**
*/
class SIDAudioProcessorEditor;
class SIDAudioProcessor : public gin::Processor
{
public:
    //==============================================================================
    SIDAudioProcessor();
    ~SIDAudioProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    
    static String paramWave1;
    static String paramPulseWidth1;
    static String paramA1;
    static String paramD1;
    static String paramS1;
    static String paramR1;
    static String paramTune1;
    static String paramFine1;
    static String paramSync1;
    static String paramRing1;
    static String paramWave2;
    static String paramPulseWidth2;
    static String paramA2;
    static String paramD2;
    static String paramS2;
    static String paramR2;
    static String paramTune2;
    static String paramFine2;
    static String paramSync2;
    static String paramRing2;
    static String paramWave3;
    static String paramPulseWidth3;
    static String paramA3;
    static String paramD3;
    static String paramS3;
    static String paramR3;
    static String paramTune3;
    static String paramFine3;
    static String paramSync3;
    static String paramRing3;
    static String paramCutoff;
    static String paramReso;
    static String paramFilter1;
    static String paramFilter2;
    static String paramFilter3;
    static String paramLP;
    static String paramBP;
    static String paramHP;
    static String paramVol;
    static String paramOutput3;
    static String paramVoices;
    
    gin::AudioFifo fifo {1, 44100};

private:
    void runUntil (int& done, AudioSampleBuffer& buffer, int pos);
    SIDEngine* findFreeVoice();
    SIDEngine* findVoiceForNote (int note);
    
    OwnedArray<SIDEngine> sids;
    int nextVoice = 0;

    IIRFilter outputFilter;
        
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SIDAudioProcessor)
};

