/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#pragma once

#include <JuceHeader.h>
#include "3rdparty/resid-0.16/sid.h"

//==============================================================================
class SIDAudioProcessor;
class SIDEngine
{
public:
    SIDEngine (SIDAudioProcessor& p);

    void prepareToPlay (double sampleRate);
    void processBlock (juce::AudioSampleBuffer& buffer, juce::MidiBuffer& midi);

    void prepareBlock (juce::AudioSampleBuffer& buffer);
    void handleMessage (const juce::MidiMessage& msg);
    void runUntil (int& done, juce::AudioSampleBuffer& buffer, int pos);

    int getNote()               { return lastNote;              }
    int regToCutoff (reg16 val) { return sid.regToCutoff (val); }

    void reset();

private:
    int parameterIntValue (const juce::String& uid);
    float parameterValue (const juce::String& uid);
    bool parameterBoolValue (const juce::String& uid);
    void updateOscs (int curNote);
    void writeReg (uint8_t reg, uint8_t value);

    SIDAudioProcessor& processor;

    int lastNote = -1;
    int velocity = 0;
    float pitchBend = 0;
    juce::Array<int> noteQueue;

    SID sid;

    std::map<uint8_t, uint8_t> regCache;
};

//==============================================================================
/**
*/
class SIDAudioProcessorEditor;
class SIDAudioProcessor : public gin::Processor
{
public:
    //==============================================================================
    SIDAudioProcessor();
    ~SIDAudioProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void reset() override;
    void processBlock (juce::AudioSampleBuffer&, juce::MidiBuffer&) override;

    //==============================================================================
    juce::AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================

    static juce::String paramWave1;
    static juce::String paramPulseWidth1;
    static juce::String paramA1;
    static juce::String paramD1;
    static juce::String paramS1;
    static juce::String paramR1;
    static juce::String paramTune1;
    static juce::String paramFine1;
    static juce::String paramSync1;
    static juce::String paramRing1;
    static juce::String paramWave2;
    static juce::String paramPulseWidth2;
    static juce::String paramA2;
    static juce::String paramD2;
    static juce::String paramS2;
    static juce::String paramR2;
    static juce::String paramTune2;
    static juce::String paramFine2;
    static juce::String paramSync2;
    static juce::String paramRing2;
    static juce::String paramWave3;
    static juce::String paramPulseWidth3;
    static juce::String paramA3;
    static juce::String paramD3;
    static juce::String paramS3;
    static juce::String paramR3;
    static juce::String paramTune3;
    static juce::String paramFine3;
    static juce::String paramSync3;
    static juce::String paramRing3;
    static juce::String paramCutoff;
    static juce::String paramReso;
    static juce::String paramFilter1;
    static juce::String paramFilter2;
    static juce::String paramFilter3;
    static juce::String paramLP;
    static juce::String paramBP;
    static juce::String paramHP;
    static juce::String paramVol;
    static juce::String paramOutput3;
    static juce::String paramVoices;

    gin::AudioFifo fifo {1, 44100};

private:
    void runUntil (int& done, juce::AudioSampleBuffer& buffer, int pos);
    SIDEngine* findFreeVoice();
    SIDEngine* findVoiceForNote (int note);

    juce::OwnedArray<SIDEngine> sids;
    int nextVoice = 0;

    juce::IIRFilter outputFilter;

    juce::MidiKeyboardState keyboardState;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SIDAudioProcessor)
};
